#!/usr/bin/env ruby
require 'httparty'
require 'dotenv/load'
require 'thor'
lib_files = File.join(File.dirname(__FILE__), 'lib', '*.rb')
src_files = File.join(File.dirname(__FILE__), 'src', '**', '*.rb')
Dir[lib_files].each { |file| require file }
Dir[src_files].each { |file| require file }

# The CLI application
class Aoc < Thor
  desc 'download YEAR DAY', 'downloads an input file'
  method_option :download, aliases: '-d'
  def download(year, day)
    aoc_api = AocApi.new(year, ENV['AOC_COOKIE'])
    content = aoc_api.day(day)
    PuzzleCache.save_puzzle(year, Day.pad(day), content)
  end

  desc 'bootstrap YEAR DAY', 'prepares a sample project for a given day'
  method_option :bootstrap, aliases: '-b'
  def bootstrap(year, day)
    download(year, day)
    Template.create_templates(year, day)
  end

  desc 'run YEAR DAY', 'executes a given day/year'
  method_option :run_day, aliases: '-r'
  def run_day(year, day)
    padded_day = Day.pad(day)

    begin
      puzzle = Module.const_get("Year#{year}").const_get("Day#{padded_day}").new
    rescue NameError
      puts 'There is no solution for this puzzle'
      # return
    end
    begin
      input = File.read("./input/#{year}/day-#{padded_day}")
    rescue Errno::ENOENT
      puts 'The puzzle file is missing'
      return
    end
    puts 'part 1:'
    puts puzzle.part1(input)
    part_2 = puzzle.part2(input)
    if part_2 != nil
      puts "part 2:"
      puts part_2
    end
  end
end

Dotenv.require_keys('AOC_COOKIE', 'AOC_INPUT_DIRECTORY')
Aoc.start
